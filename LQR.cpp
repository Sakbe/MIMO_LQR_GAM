
//******************************************************************************
//
//		LQR.cpp - LQR CONTROL AND KALMAN FILTER
//		CORONA - CIANCIULLI 05/2019
//
//******************************************************************************


#include "LQR.h"

//OBJECTLOADREGISTER(IPID,"$Id: IPID.cpp,v 1.0 29/4/2011 14:22:36 ivoc Exp $")
// if cycle time is supplied
//CONSTRUCTOR AND DESTRUCTOR
LQR::LQR(){
	//this-> N_state = 10;
	//this-> N_input = 2;
	//this-> N_output = 2;

	this-> X_LQR = (float[N_state]){0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

	this-> x_dot_pos = (float[N_state]){0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

	this-> x_pos = (float[N_state]){0.0983539734804260, 0.480564466137287, -0.204246862173158, 0.0605647026605041, -0.369796209977501, 0.111380460346364, 0.0194246756583234, 0.144179620264490, -0.0534417070457820, 0.215640033094750};

	//this-> K_LQR_pos =(float[N_input * N_state]) {-39.8874724584811, -70.6769666120137, 354.869808121735, 370.159896447712, -106.569303855515, -10.6727031034049, -29.8250480200422, 75.3583282160950, -135.655340474040, -27.8586258177635,
	//						4.85034537803885, 16.3699444462248, -103.189045436383, -88.9493312103841, 36.1506690550597, 19.0337453517795, 10.4943236824918, -28.3848265454111, 45.6326833691854, 8.77044127460252};

		this-> A_est_pos= (float[N_state * N_state]) {0.6965091,	-0.042519,	-0.0124689,	-0.0038628,	0.0050987,	-0.0044529,	0.0003075,	0.0075293,	0.0005438,	0.0027291,
																								-0.5891101,	-0.4792675,	0.0863216,	-0.1696601,	0.0054012,	-0.0556949,	-0.0211279,	0.0184621,	0.0460972,	0.0757254,
																								-5.3452768,	-0.7565834,	0.8195927,	0.0698719,	0.1952006,	-0.1102075,	-0.0853203,	0.3147905,	-0.0505779,	0.1064141,
																								0.7042699,	-0.5171061,	-0.0450685,	0.7978659,	0.1277063,	-0.0943104,	-0.1251775,	0.1179207,	0.2269751,	0.1640943,
																								-3.8394594,	1.2404493,	-0.1713953,	0.0987716,	0.993,	0.3706177,	0.265716,	-0.1626683,	0.0278814,	-0.2945983,
																								6.1999946,	-0.028494,	0.0843297,	0.00674,	-0.3576927,	0.87427,	0.2174425,	0.3691505,	-0.0280659,	0.1901623,
																								7.7529078,	3.111933,	-0.1089129,	0.3237242,	-0.1525773,	-0.2358007,	0.3101533,	-0.4880518,	0.1112694,	0.3144002,
																								2.702348,	6.6696548,	-0.4727987,	0.3463634,	0.0092461,	0.0131482,	0.5591946,	-0.1252702,	-0.6014581,	-0.1113655,
																								6.5374441,	4.4414382,	-0.1856215,	0.2327807,	-0.1197778,	-0.1787938,	0.2028056,	-0.1005165,	0.5601881,	-0.6621173,
																								-13.126461,	-3.4101262,	-0.0806446,	-0.1100666,	0.1180396,	-0.1796656,	-0.4677798,	-0.0671527,	-0.4231717,	-0.1675852};


	this-> B_est_pos=(float[N_state * ( N_input +  N_output)])  {-0.00000679,	-0.00012818,	-0.00005677,	0.00029762,	-0.00025856,	-0.00040971,	0.00209464,	-0.00058639,	-0.00039295,	-0.00014068,
																															-0.00000863,	-0.00015073,	0.00033058,	0.00049966,	-0.00064293,	-0.00056508,	0.00148645,	0.00029543,	0.00006341,	-0.00103388,
																															0.10402035,	5.2415452,	2.17423749,	1.51000249,	-5.00431633,	0.9971475,	-10.28696442,	-24.65203667,	-15.71390247,	11.22548389,
																															-0.54193759,	-2.40042901,	-9.54350567,	0.80970061,	-5.09362936,	10.18571663,	15.79635048,	11.09492016,	15.2142601,	-25.07771301};
	//B_est_pos =[vertical; horizonal; rc; zc]

	this-> C_est_pos=(float[N_state * (N_state +  N_output)])  {	-0.0194694,	0.0171508,	-0.001724,	0.0010225,	0.0004599,	0.0000312,	0.0001768,	0.0003404,	-0.0001408,	-0.0001067,
																																-0.0506406,	0.0001529,	-0.0009377,	0.0002842,	0.0005729,	-0.0002643,	0.0000276,	0.0003376,	0.0000116,	-0.000124,
																																	0.4575474,	-0.0168286,	-0.0085716,	0.0020573,	0.005878,	-0.002975,	0.0001162,	0.0033885,	0.0002809,	-0.001264,
																																	-1.1068335,	-0.032155,	0.0621085,	-0.0491192,	-0.0019985,	-0.0138267,	-0.0094653,	-0.0053833,	0.0090509,	0.0008692,
																																	-10.5209036,	0.9819406,	0.7293845,	0.1098098,	0.1323495,	-0.0475291,	0.0149757,	0.0818445,	-0.0056687,	-0.0290361,
																																	-3.0829895,	2.3597016,	-0.2445847,	1.1428902,	0.0678372,	0.0021788,	0.0245354,	0.0495184,	-0.0192652,	-0.0156689,
																																	-2.4977024,	-1.978804,	0.1122049,	-0.0921215,	1.0004034,	-0.028478,	-0.0179526,	-0.0078299,	0.0174474,	0.0007507,
																																	-7.9216676,	-2.4810283,	0.0531382,	-0.0893953,	0.054494,	0.9391795,	-0.0200378,	0.021936,	0.0230931,	-0.0107336,
																																	23.9763241,	10.5402927,	-0.402624,	0.4325289,	-0.1224329,	0.2076457,	1.0901206,	-0.0290384,	-0.0956481,	0.0220124,
																																	23.7088242,	-1.8167948,	0.5782408,	-0.226296,	-0.2926962,	0.110185,	-0.0298972,	0.8204442,	0.0094099,	0.0640642,
																																	4.237761,	-0.6793307,	0.1316426,	-0.0593958,	-0.0572894,	0.0169382,	-0.0087918,	-0.0364642,	1.0046947,	0.0126764,
																																	-4.9725757,	-2.7254858,	0.1265378,	-0.1185307,	0.0178271,	-0.0472584,	-0.0239363,	-0.0006262,	0.0244206,	0.9972991};

this-> D_est_pos=(float[(N_state + N_output) * (N_input + N_output)]) { 		0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,
																																						0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,
																																						0.9336531,	-0.0066545,	-0.0023639,	3.7190876,	-4.9286175,	-9.1769218,	7.084938,	8.3076429,	-36.4564934,	9.6287098,	3.0444162,	9.5742702,
																																						-0.0151199,	0.9165385,	-0.9123563,	-2.8521645,	-16.3963795,	-2.7477973,	-6.088418,	-15.5425682,	50.0513306,	37.3423195,	6.3226209,	-10.9159698};


//	this-> N_BAR_pos = (float[N_input +  N_output]){-16738.8719868375, 3479.82442345434,
//							488.651395096507, -28.3958381254954};



	//more slow
	this-> N_BAR_pos = (float[N_input +  N_output]){-10292.2693526553, 2133.74129809333,
							-944.140351815484, 269.810568562941};
	this-> K_LQR_pos =(float[N_input * N_state]) {-0.677239930551175, -5.56445051715661, 29.1530400398665, 10.5689835482429, -6.43042836144154, 0.784006911127944, -1.67848331436731, 6.89611601694075, -11.6198347798690, -4.41024916164279,
							-0.253637909222695, 0.998896201615173, -6.91291373508615, -4.34730845911924, 2.02654430640833, 0.350198601401546, 0.540286005706202, -1.95918796444674, 3.18376611395890, 0.992300688479676};



	this-> x_neg=(float[N_state])  {-0.0494766508450061, -0.111034664506845, 0.0242441680811973, 0.00586343293525677, -0.00854660070320271, 0.000970048477408260, -0.000888992834197872, 0.00166157894650906, 0.000997825822154208, 0.00231148829292225};
	this-> x_dot_neg=(float[N_state])  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
//	this-> K_LQR_neg=(float[N_input * N_state])  {-1.10243700688381, -26.6888168111469, 248.208386299799, 2272.69314089294, 341.435985384170, 116.974185358079, -1571.00753489878, -331.351679250269, -1271.06969797964, -4441.09340489016,
//							-0.233414809301534, -21.1374545809135, 237.120488501101, 3170.68925311282, -143.026532612836, 258.466914847382, -1451.21045848359, -298.057584698670, -925.765520002125, -4247.87411829111};

this-> A_est_neg=(float[N_state * N_state])  { 0.771434903144836,	-0.0213481634855270	,0.0261535793542862	,-0.00303411646746099,	0.000337190256686881,	0.00546311680227518,	0.00869811698794365,	0.00134855695068836	,-0.00140575342811644,	-0.00569500029087067,
																							-0.366069525480270,	0.250144332647324,	0.00144429435022175,	-0.0670503750443459,	-0.00747908977791667,	-0.0462464019656181,	0.0742813423275948,	-0.0635174810886383	,-0.0779647007584572,	-0.0210031475871801,
																							 4.33581495285034,	-0.590004861354828,	0.597714960575104	,-0.0142560480162501,			0.0616077519953251,	-0.135960534214973,	-0.0822315588593483	,-0.145310953259468,	-0.0778676196932793	,0.105946756899357,
																							-0.549529731273651,	-0.505382001399994,	-0.0146774901077151,	0.903384327888489,	0.113554216921330	,0.0136349154636264	,0.116127744317055,		-0.00154806533828378,	-0.129825934767723,		-0.0259321350604296,
																							-6.09044837951660	,	-0.0463736392557621,	0.166769951581955	,-0.164827242493629,	0.951034069061279	,	0.334019392728806,		-0.0701051056385040,	0.0328304059803486,	-0.0394659452140331	,-0.0729178562760353,
																							-2.64672613143921,	-1.39282512664795	,	0.135581597685814,	-0.0177038237452507,	-0.359038203954697,	0.903093755245209	,	0.00646943971514702	,-0.189019113779068	,-0.0719970911741257			0.0334509052336216,
																							2.13352799415588,		2.22832036018372,		0.0217295866459608,	0.0421887934207916,		0.0523677915334702,	0.0197503026574850,	0.836424469947815,	0.234644025564194	,			0.0590018332004547	,				0.321341514587402,
																							0.0965597331523895,	-0.928759276866913,	0.00202205497771502,	-0.0288900360465050,	-0.112281762063503,	0.0438500605523586,	-0.269708096981049,	0.819548964500427,	-0.468864440917969,	0.171435549855232,
																							-0.251248270273209,	1.26187837123871,		0.134749248623848,	0.00261524762026966,	0.0358102545142174,	0.0222110170871019,	-0.0448091737926006	,0.296370923519135,	0.880721569061279,	-0.150740668177605,
																							3.59590244293213,		-0.370808780193329,	-0.199803695082665,	0.0155299315229058,	-0.00276810512878001,	-0.0412138439714909,	-0.194448232650757,	-0.153701215982437,	0.0843583270907402,		0.940047323703766};

	this-> B_est_neg=(float[N_state * ( N_input +  N_output)]) {-1.07048444988322*1e-05,	-0.000183522846782580,	-3.74047594959848*1e-05,	-0.000160396710271016,	-2.73119858320570*1e-05,	-0.000285214860923588,	0.000690767134074122,	5.48434763913974*1e-05,	0.000362863094778731	-7.53530002839398*1e-06,
																															 6.86851535647293*1e-06,	0.000576353340875357,		0.000297898368444294,			0.000830119126476347,		0.000790568825323135,				0.000581721367780119,	-0.000604040280450136	,0.00136100687086582,	0.000439021765487269,		-0.000523446942679584,
																															 0.0923270657658577,			3.09482789039612,				2.15514469146729,				2.06601238250732,					0.904656708240509,					6.51248788833618,			-9.77792072296143,			4.19905138015747,		-5.75626945495606	,			1.21263265609741,
																															 1.07229363918304,				0.357132524251938,			-22.0917835235596,				1.69208729267120				29.1692543029785,						9.78439331054688,			-5.65546703338623	,			-2.42480802536011,	3.98085331916809,				-18.0600776672363};

this-> C_est_neg=(float[N_state * (N_state +  N_output)]) {		 0.1303069,	-0.0022856,	-0.0054239,	-0.0003444,	0.0000596,	-0.0004174,	-0.0000876,	-0.0006349,	-0.000244,	0.0007967,
																															 0.7832609,	-0.0272126,	0.0078595,	0.0005289,	-0.0001183,	0.0006611,	-0.0001278,	0.0011005,	0.0005162,	-0.0009599,
																															 0.1212713,	0.1253583,	-0.0377397,	-0.0015577,	-0.0004866,	-0.0013201,	-0.0077775,	0.0006601,	0.0028773,	0.0110183,
																															 4.4917002,	-0.5076883,	0.7969663,	-0.01248,	0.0017864,	-0.0148445,	-0.0068038,	-0.0212706,	-0.0068855,	0.0325156,
																															 0.9540773,	-0.7128019,	-0.0657934,	0.9964914,	0.0000036,	-0.0037991,	-0.0067812,	-0.0036507,	0.0006899,	0.0140321,
																															 -4.1586981,	0.4105074,	0.1857504,	0.0114703,	0.9983091,	0.0136804,	0.0057742,	0.019779,	0.0065869,	-0.0294037,
																															 -4.3919225,	-1.1453112,	0.1370106,	0.0098749,	-0.0027666,	1.0127617,	-0.0078279,	0.023152,	0.0125738,	-0.0124565,
																															 -1.0976183,	2.4478388,	0.1366832,	0.0063446,	0.0010072,	0.0061089,	1.0221592,	0.0018659,	-0.0065855,	-0.035316,
																															 -1.9208847,	0.5682161,	0.0999831,	0.0058349,	-0.0005458,	0.0067232,	0.0060065,	1.008593,	0.0016954,	-0.0180408,
																															 -0.7125837,	1.4324522,	0.0828644,	0.0038968,	0.0005565,	0.0037986,	0.0130038,	0.0014361,	0.9962822,	-0.0210817,
																															 3.4565637,	0.0125011,	-0.1411366,	-0.0090322,	0.0016252,	-0.010993,	-0.0016796,	-0.0169468,	-0.0067333,	1.0202733};

this-> D_est_neg=(float[(N_state + N_output) * (N_input + N_output)]){0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,
																															 				0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,
																															 				0.8693017,	-0.0073748,	0.1482145,	3.8177338,	1.6258545,	2.9971583,	-1.2443196,	5.6066165,	-10.5833921,	-2.234328,	-6.1839218,	-0.5161827,
																															 				-0.5060775,	0.3702431,	0.9821247,	-2.4245155,	-22.6115398,	-6.0775795,	20.8097248,	18.6500721,	10.4217892,	10.4096584,	6.4357314,	-16.5510502};

//	this-> N_BAR_neg=(float[N_input +  N_output]) {6692.27395164254, -960.635617013133,
	//						-2256.41280370701, -489.068332481912};


	//more slow
	this-> N_BAR_neg = (float[N_input +  N_output]){6577.20274262693, -953.521247320254,
							-2537.02933847542, -432.837113235285};
	this-> K_LQR_neg =(float[N_input * N_state]) {-0.0143959540956107, -0.325150394017629, 3.13416013810849, 26.5396916000373, 4.19324806144036, 1.55806909562497, -18.7468162690424, -3.85545880019961, -15.3160343140834, -53.4859040919299,
							-0.00458150757613837, -0.243881430718078, 2.88347865234915, 35.3882054725928, -2.01002787695297, 2.81135503841810, -16.8859632308927, -3.47894536276546, -10.3473795912101, -48.0323686610169};


}

LQR::~LQR(){
}

//////////////////////////// Controllers /////////////////////////////////////////////////////////


LQRouputs  LQR::MIMO_CONTROL_POSITIVE(float R_ref, float Z_ref, float R_real, float Z_real, float I_vertical, float I_horizontal){
	float u_Nbar_0 = 0;
	float u_Nbar_1 = 0;
	float u_vertical=0;
	float u_horizontal=0;
	int i = 0;
	int j = 0;
	float temp = 0.0;
	float *outputs;
	outputs =(float[2]) {0, 0};
	LQRouputs Outputs={0,0};



	//Nbar(2x2)
	u_Nbar_0 = (R_ref* this->N_BAR_pos[0]) + (Z_ref* this->N_BAR_pos[1]);
	u_Nbar_1 = (R_ref * this->N_BAR_pos[2]) + (Z_ref * this->N_BAR_pos[3]);

	//u=u-k_lqr*x
	for (i = 0; i < N_state; i++) {
		temp += this->X_LQR[i] * this->K_LQR_pos[i];
		}
	u_vertical = u_Nbar_0 - temp;
	temp = 0;

	for (i = 0; i < N_state; i++) {
		temp += this->X_LQR[i] * this->K_LQR_pos[i+N_state];

	}
	u_horizontal = u_Nbar_1 - temp;
	temp = 0;

	Outputs.Ivert = u_vertical;
	Outputs.Ihor = u_horizontal;

	return Outputs;
}


LQRouputs  LQR::MIMO_CONTROL_NEGATIVE(float R_ref, float Z_ref, float R_real, float Z_real, float I_vertical, float I_horizontal){
	float u_Nbar_0 = 0;
	float u_Nbar_1 = 0;
	float u_vertical=0;
	float u_horizontal=0;
	int i = 0;
	int j = 0;
	float temp = 0.0;
	float *outputs;
	outputs =(float[2]) {0, 0};
	LQRouputs Outputs={0,0};



	//Nbar(2x2)
	u_Nbar_0 = (R_ref* this->N_BAR_neg[0]) + (Z_ref* this->N_BAR_neg[1]);
	u_Nbar_1 = (R_ref * this->N_BAR_neg[2]) + (Z_ref * this->N_BAR_neg[3]);

	//u=u-k_lqr*x
	for (i = 0; i < N_state; i++) {
		temp += this->X_LQR[i] * this->K_LQR_neg[i];
	}
	u_vertical = u_Nbar_0 - temp;
	temp = 0.0;

	for (i = 0; i < N_state; i++) {
		temp += this->X_LQR[i] * this->K_LQR_neg[i+N_state];

	}
	u_horizontal = u_Nbar_1 - temp;
		temp = 0.0;

	Outputs.Ivert = u_vertical;
	Outputs.Ihor = u_horizontal;

	return Outputs;
}




///////////////////////////////////////////// KALMAN FILTERS////////////////////////////////////////////////////////





Kalman LQR:: KALMAN_FILTER_POS(float R_real, float Z_real, float I_vertical, float I_horizontal, int sign){
	//the same as before
	//if we use this in mimo class we can comment from 102 to 115
	//i putted because we can copy this in IPID class
	float temp=0.0;
	int j=0;
	int i=0;
	int m=0;
	int n=0;
	// buffers time

	float buff=0.0;
	float buffer=0.0;


	float* y_est;
	y_est =(float[2]){0, 0};
	float* X_est;
	X_est =(float[10]){0, 0,0,0,0,0,0,0,0,0};


	Kalman Outputs={0.085,0.085,X_est};

	for(i=0; i< N_state; i++){
		buff = this->x_pos[i];
		this->X_LQR[i] = buff;
	}
	buff=0.0;

	if(sign == 1){

		for(j = 0; j < N_state; j++){
			buff = 0.0;
			for (i = 0; i < N_state; i++) {
				m=i + j*(N_state);
				buff = buff + this->A_est_pos[m] * this->x_pos[i];
			}
			this->x_dot_pos[j] = buff;
		}

		for(i = 0; i < N_state; i++){
			j= i + (N_state);
			m=i + 2*(N_state);
			n=i + 3*(N_state);
			temp =  this->B_est_pos[i] * I_vertical + this->B_est_pos[j] * I_horizontal + this->B_est_pos[m] * R_real + this->B_est_pos[n] * Z_real;
			this->x_dot_pos[i] += temp;

		}
		temp = 0.0;

		//x^(k+1) = A_est * x(k)+ B_est * u(k)

		//[y_est x_est] = C_est x_est + D_est [u_real y_real]
		for(j = 0; j < N_output; j++){
			buff = 0.0;
			for (i = 0; i < N_state; i++) {
				m=i + j*(N_state);
				 buff += this->C_est_pos[m] * this->x_pos[i];
			}
			y_est[j] = buff;
		}



			buff =  this->D_est_pos[24] * R_real + this->D_est_pos[36] * Z_real;
			y_est[0] += buff;
			buff = 0.0;
			buff =  this->D_est_pos[25] * R_real + this->D_est_pos[37] * Z_real;
			y_est[1] += buff;
			buff = 0.0;






			//x(k)=x(k+1) for the next step


		Outputs.Kalman_R= y_est[0];
		Outputs.Kalman_Z= y_est[1];
		Outputs.X_est= this-> x_pos;

		buffer = 0.0;
		for (i = 0; i < N_state; i++) {
			buffer =this->x_dot_pos[i];
			this->x_pos[i]=buffer;
		}

		}else{
			Outputs.Kalman_R= 0.085;
			Outputs.Kalman_Z= 0.085;
				for (i = 0; i < N_state; i++) {
						X_est[i]=0.0;}

			Outputs.X_est=X_est;
			}


	return Outputs;

}

Kalman LQR:: KALMAN_FILTER_NEG(float R_real, float Z_real, float I_vertical, float I_horizontal, int sign){
	//the same as before
	//if we use this in mimo class we can comment from 102 to 115
	//i putted because we can copy this in IPID class
	float temp=0.0;
	int j=0;
	int i=0;
	int m=0;
	int n=0;
	// buffers time

	float buff=0.0;
	float buffer=0.0;


	float* y_est;
	y_est =(float[2]){0, 0};
	float* X_est;
	X_est =(float[10]){0, 0,0,0,0,0,0,0,0,0};
	Kalman Outputs={0.085,0.085,X_est};

	for(i=0; i< N_state; i++){
		buff = this->x_neg[i];
		this->X_LQR[i] = buff;;
	}
	buff=0.0;
	if(sign == 1){

		for(j = 0; j < N_state; j++){
			buff = 0.0;
			for (i = 0; i < N_state; i++) {
				m=i + j*(N_state);
				buff = buff + this->A_est_neg[m] * this->x_neg[i];
			}
			this->x_dot_neg[j] = buff;
		}

		for(i = 0; i < N_state; i++){
			j= i + (N_state);
			m=i + 2*(N_state);
			n=i + 3*(N_state);
			temp =  this->B_est_neg[i] * I_vertical + this->B_est_neg[j] * I_horizontal + this->B_est_neg[m] * R_real + this->B_est_neg[n] * Z_real;
			this->x_dot_neg[i] += temp;

		}
		temp = 0.0;



		//[y_est x_est] = C_est x_est + D_est [u_real y_real]
		for(j = 0; j < N_output; j++){
			buff = 0.0;
			for (i = 0; i < N_state; i++) {
				m=i + j*(N_state);
				 buff += this->C_est_neg[m] * this->x_neg[i];
			}
			y_est[j] = buff;
		}



			buff =  this->D_est_neg[24] * R_real + this->D_est_neg[36] * Z_real;
			y_est[0] += buff;
			buff = 0.0;
			buff =  this->D_est_neg[25] * R_real + this->D_est_neg[37] * Z_real;
			y_est[1] += buff;
			buff = 0.0;




			//x(k)=x(k+1) for the next step


		Outputs.Kalman_R= y_est[0];
		Outputs.Kalman_Z= y_est[1];
		Outputs.X_est=this->x_neg;

		buffer = 0.0;
		for (i = 0; i < N_state; i++) {
			buffer =this->x_dot_neg[i];
			this->x_neg[i]=buffer;
		}

		}else{
			Outputs.Kalman_R= 0.085;
			Outputs.Kalman_Z= 0.085;
				for (i = 0; i < N_state; i++) {
						X_est[i]=0.0;}

			Outputs.X_est=X_est;
			}


	return Outputs;

}
int LQR:: erase() {
	int i = 0;
	float* state0_pos;
	float* state0_neg;
	state0_pos = (float[N_state]){0.0983539734804260, 0.480564466137287, -0.204246862173158, 0.0605647026605041, -0.369796209977501, 0.111380460346364, 0.0194246756583234, 0.144179620264490, -0.0534417070457820, 0.215640033094750};
	state0_neg=(float[N_state])  {-0.0494766508450061, -0.111034664506845, 0.0242441680811973, 0.00586343293525677, -0.00854660070320271, 0.000970048477408260, -0.000888992834197872, 0.00166157894650906, 0.000997825822154208, 0.00231148829292225};

	for (i = 0; i < N_state; i++) {
			this->x_dot_pos[i]=0.0;
		}
	for (i = 0; i < N_state; i++) {
			this->x_dot_neg[i]=0.0;
		}
	for (i = 0; i < N_state; i++) {
			this->x_pos[i]=state0_pos[i];
		}
	for (i = 0; i < N_state; i++) {
			this->x_neg[i]=state0_neg[i];
		}


	return 1;
	}


	/* POSITIVE
	/////normal
	this-> N_BAR_pos = (float[N_input +  N_output]){-16738.8719868375, 3479.82442345434,
							488.651395096507, -28.3958381254954};
	this-> K_LQR_pos =(float[N_input * N_state]) {-39.8874724584811, -70.6769666120137, 354.869808121735, 370.159896447712, -106.569303855515, -10.6727031034049, -29.8250480200422, 75.3583282160950, -135.655340474040, -27.8586258177635,
							4.85034537803885, 16.3699444462248, -103.189045436383, -88.9493312103841, 36.1506690550597, 19.0337453517795, 10.4943236824918, -28.3848265454111, 45.6326833691854, 8.77044127460252};
	/////slow
	this-> N_BAR_pos = (float[N_input +  N_output]){-11086.5128004769, 2304.91025662465,
							-624.913612903589, 203.085650822326};
	this-> K_LQR_pos =(float[N_input * N_state]) {-8.01681293888861, -26.8325522087463, 134.585605910785, 71.3907687002046, -31.1613639245902, 1.06653823136754, -8.67641023817368, 30.6278817417476, -52.6867168563030, -17.6236782619040,
							-0.359505258997209, 5.27976739349132, -34.7284975804598, -24.9860321020505, 10.5336478520904, 3.20301260401835, 2.98116013872604, -9.62426558998255, 15.6891220336232, 4.25997674316981};


	//more slow
	this-> N_BAR_pos = (float[N_input +  N_output]){-10292.2693526553, 2133.74129809333,
							-944.140351815484, 269.810568562941};
	this-> K_LQR_pos =(float[N_input * N_state]) {-0.677239930551175, -5.56445051715661, 29.1530400398665, 10.5689835482429, -6.43042836144154, 0.784006911127944, -1.67848331436731, 6.89611601694075, -11.6198347798690, -4.41024916164279,
							-0.253637909222695, 0.998896201615173, -6.91291373508615, -4.34730845911924, 2.02654430640833, 0.350198601401546, 0.540286005706202, -1.95918796444674, 3.18376611395890, 0.992300688479676};

	*/
	/* NEGATIVE
	//////normal
	this-> K_LQR_neg=(float[N_input * N_state])  {-1.10243700688381, -26.6888168111469, 248.208386299799, 2272.69314089294, 341.435985384170, 116.974185358079, -1571.00753489878, -331.351679250269, -1271.06969797964, -4441.09340489016,
							-0.233414809301534, -21.1374545809135, 237.120488501101, 3170.68925311282, -143.026532612836, 258.466914847382, -1451.21045848359, -298.057584698670, -925.765520002125, -4247.87411829111};
	this-> N_BAR_neg=(float[N_input +  N_output]) {6692.27395164254, -960.635617013133,
							-2256.41280370701, -489.068332481912};

	/////slow
	this-> N_BAR_pos = (float[N_input +  N_output]){6589.72680834879, -954.006515986846,
							-2507.09039980905, -438.508741661756};
	this-> K_LQR_pos =(float[N_input * N_state]) {-0.140009763339089, -3.18557215603840, 30.5815322306256, 261.182404835037, 41.0701964065595, 15.1457297490992, -184.071391002032, -37.9502637307121, -150.255931786410, -524.709987410739,
							-0.0430382829459303, -2.40364558484570, 28.2516724393487, 349.930303853398, -19.3580296640594, 27.8929619552656, -166.244389576828, -34.2340029306290, -102.365591295273, -474.430220412449};


	//more slow
	this-> N_BAR_pos = (float[N_input +  N_output]){6577.20274262693, -953.521247320254,
							-2537.02933847542, -432.837113235285};
	this-> K_LQR_pos =(float[N_input * N_state]) {-0.0143959540956107, -0.325150394017629, 3.13416013810849, 26.5396916000373, 4.19324806144036, 1.55806909562497, -18.7468162690424, -3.85545880019961, -15.3160343140834, -53.4859040919299,
							-0.00458150757613837, -0.243881430718078, 2.88347865234915, 35.3882054725928, -2.01002787695297, 2.81135503841810, -16.8859632308927, -3.47894536276546, -10.3473795912101, -48.0323686610169};

	*/
